#!/bin/bash

# Script to generate main.cpp with LinkedQueue test program
# DO NOT EDIT THIS FILE

cat << 'EOF' > main.cpp
#include "ArrayQueue.hpp"
#include <cstdlib>
#include <ctime>

int main() {
    // create a queue of 10 integers
    ArrayQueue<int> queueA(10);

    // attempt to display the front and back
    try {
        cout << queueA.front() << " ";
    } catch (string& e) {
        cout << e << " ";
    }
    try {
        cout << queueA.back() << " ";
    } catch (string& e) {
        cout << e << " ";
    }

    // insert just one element to queue A
    queueA.enqueue(-5);

    // display its length, front, and back
    cout << "queue A length: " << queueA.getLength() << " ";
    cout << "queue A front: "  << queueA.front()     << " ";
    cout << "queue A back: "   << queueA.back()      << " ";

    // now remove the single element from queue A
    queueA.dequeue();

    // display its length, front, and back
    cout << "queue A length: " << queueA.getLength() << " ";
    try {
        cout << queueA.front() << " ";
    } catch (string& e) {
        cout << e << " ";
    }
    try {
        cout << queueA.back() << " ";
    } catch (string& e) {
        cout << e << " ";
    }

    queueA.enqueue(84);
    queueA.enqueue(326);
    queueA.enqueue(314);
    queueA.enqueue(73);
    queueA.enqueue(295);
    queueA.enqueue(147);
    queueA.enqueue(466);
    queueA.enqueue(166);
    queueA.enqueue(431);
    queueA.enqueue(178);

    // ensure that queue A is now full
    if (queueA.isFull()) {
        cout << "queue A is full! ";
    }
    else {
        cout << "queue A is not full [ERROR] ";
    }

    // display its length, front, and back
    cout << "queue A length: " << queueA.getLength() << " ";
    cout << "queue A front: "  << queueA.front()     << " ";
    cout << "queue A back: "   << queueA.back()      << " ";

    // make a copy of queue A
    ArrayQueue<int> queueB = queueA;

    // loop to dequeue and print
    cout << "queue A contains: ";
    for (int i = 0; i < queueA.getMaxSize(); i++) {
        cout << queueA.front() << ' ';
        queueA.dequeue();
    }
    cout << " ";

    // queue A should now be empty
    if (queueA.isEmpty()) {
        cout << "queue A is now empty ";
    }
    else {
        cout << "queue A is not empty [ERROR] ";
    }

    // display queue B length, front, and back
    cout << "queue B length: " << queueB.getLength() << " ";
    cout << "queue B front: "  << queueB.front()     << " ";
    cout << "queue B back: "   << queueB.back()      << " ";

    // make a copy of queue B
    ArrayQueue<int> queueC;
    queueC = queueB;

    // clear out queue B
    queueB.clear();

    // queue B should now be empty
    if (queueB.isEmpty()) {
        cout << "queue B is now empty ";
    }
    else {
        cout << "queue B is not empty [ERROR] ";
    }

    // display queue C length, front, and back
    cout << "queue C length: " << queueC.getLength() << " ";
    cout << "queue C front: "  << queueC.front()     << " ";
    cout << "queue C back: "   << queueC.back()      << " ";

    // terminate
    return 0;
}

EOF

echo "âœ… main.cpp has been created successfully."
